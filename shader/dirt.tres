[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// Using noise, create orbs that rotate in three bands of colors to make a wave
// effect.

// Layer affects the lightness of the bands. A lower layer results in lighter bands
uniform int layer = 1;
// Offset for 2D noise
uniform vec2 offset;

// psrdnoise (c) Stefan Gustavson and Ian McEwan,
// ver. 2021-12-02, published under the MIT license:
// https://github.com/stegu/psrdnoise/
float psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient) {
	vec2 uv = vec2(x.x+x.y*0.5, x.y);
	vec2 i0 = floor(uv), f0 = fract(uv);
	float cmp = step(f0.y, f0.x);
	vec2 o1 = vec2(cmp, 1.0-cmp);
	vec2 i1 = i0 + o1, i2 = i0 + 1.0;
	vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);
	vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);
	vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);
	vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;
	vec3 iu, iv, xw, yw;
	if(any(greaterThan(period, vec2(0.0)))) {
		xw = vec3(v0.x, v1.x, v2.x);
		yw = vec3(v0.y, v1.y, v2.y);
		if(period.x > 0.0)
			xw = mod(vec3(v0.x, v1.x, v2.x), period.x);
		if(period.y > 0.0)
			yw = mod(vec3(v0.y, v1.y, v2.y), period.y);
		iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);
	} else {
		iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);
	}
	vec3 hash = mod(iu, 289.0);
	hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);
	hash = mod((hash*34.0 + 10.0)*hash, 289.0);
	vec3 psi = hash*0.07482 + alpha;
	vec3 gx = cos(psi); vec3 gy = sin(psi);
	vec2 g0 = vec2(gx.x, gy.x);
	vec2 g1 = vec2(gx.y, gy.y);
	vec2 g2 = vec2(gx.z, gy.z);
	vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
	w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;
	vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));
	float n = dot(w4, gdotx);
	vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;
	vec2 dn0 = w4.x*g0 + dw.x*x0;
	vec2 dn1 = w4.y*g1 + dw.y*x1;
	vec2 dn2 = w4.z*g2 + dw.z*x2;
	gradient = 10.9*(dn0 + dn1 + dn2);
	return 10.9*n;
}

float aastep(float threshold, float value) {
  float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));
//  float afwidth = fwidth(value);  // fwidth(v) is |dFdx(v)| + |dFdy(v)|
  return smoothstep(threshold-afwidth, threshold+afwidth, value);
}

void fragment() {
	const float scale = 12.0;
	vec2 v = scale * UV.xy;
	const vec2 p = vec2(0.0);
	float alpha = sin(TIME) * 0.5 + 0.5;
	vec2 g = vec2(alpha, 1.0 - alpha);
	vec2 newv = v + offset * 0.01;
	// float n = psrdnoise(newv, p, TIME*0.5, g);
	vec3 ncolor = texture(NORMAL_TEXTURE, fract(newv)).rgb;
	float l_off = float(layer) * 0.05 + 0.025;
	// float n = 0.5 + 0.5 * psrdnoise(v + offset * 0.01, p, TIME*2.5, g);
	//vec3 ncolor = vec3(n);
	vec3 texcol = texture(TEXTURE, newv + g * 0.01).xyz;
	texcol -= l_off;
	// color = texcol;
	vec3 xcolor = vec3(texcol + l_off);
	vec3 ycolor = vec3(texcol - l_off);
	vec3 mixcol = mix(texcol, xcolor, aastep(0.6, g.x));
	mixcol = mix(mixcol, ycolor, aastep(0.6, g.y));
	// vec3 ncolor = vec3(n);
	// ncolor = max(ncolor, vec3(0.1)) * color + l_off;
	COLOR = vec4(mix(mixcol, ncolor, 0.5), 1.0);
	//COLOR = vec4(ncolor, 1.0);
}"
