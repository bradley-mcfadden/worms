[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

//
// GLSL textureless classic 2D noise \"cnoise\",
// with an RSL-style periodic variant \"pnoise\".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-08-22
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise, periodic variant
float pnoise(vec2 P, vec2 rep)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period
  Pi = mod289(Pi);        // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

// The MIT License
// Copyright Â© 2014 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Smooth Voronoi - avoiding aliasing, by replacing the usual min() function, which is
// discontinuous, with a smooth version. That can help preventing some aliasing, and also
// provides with more artistic control of the final procedural textures/models.

// More Voronoi shaders:
//
// Exact edges:  https://www.shadertoy.com/view/ldl3W8
// Hierarchical: https://www.shadertoy.com/view/Xll3zX
// Smooth:       https://www.shadertoy.com/view/ldB3zc
// Voronoise:    https://www.shadertoy.com/view/Xd23Dh


float hash1( float n ) { return fract(sin(n)*43758.5453); }
vec2  hash2( vec2  p ) { p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }

// The parameter w controls the smoothness
vec4 voronoi( in vec2 x, float w, float offset)
{
  vec2 n = floor( x );
  vec2 f = fract( x );

  vec4 m = vec4( 8.0, 0.0, 0.0, 0.0 );
  for( int j=-2; j<=2; j++ )
  for( int i=-2; i<=2; i++ )
  {
    vec2 g = vec2( float(i),float(j) );
    vec2 o = hash2( n + g );
  
    // animate
    o = 0.5 + 0.5*sin( offset * 6.2831*o );

    // distance to cell		
    float d = length(g - f + o);
  
    // cell color
    vec3 col = 0.5 + 0.5*sin( hash1(dot(n+g,vec2(7.0,113.)))*2.5 + 3.5 + vec3(2.0,3.0,0.0));
    // in linear space
    col = col*col;
      
    // do the smooth min for colors and distances		
    float h = smoothstep( -1.0, 1.0, (m.x-d)/w );
    m.x   = mix( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance
    m.yzw = mix( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // color
  }
	
	return m;
}

varying vec2 st;

const vec3 dyecolor = vec3(0.90, 0.95, 1.0);
const vec2 iResolution = vec2(4.0, 4.0);


void fragment() {
  vec2 p = UV;
  float c = 0.5;

  // vec4 v = voronoi(6.0 * p, p.x < c ? 0.001 : 0.3, 0.5);
  vec4 v = voronoi(4.0 * p /*+ 0.5 * sin(TIME)*/, 0.1, 0.5);
  // vec4 w = voronoi(64.0 * p * 2.0, 0.1, 0.5);

  // vec4 v2 = mix(v, w, );

  float noise = 0.5 + 0.5 * pnoise(UV * 16.0/* + 4.0 * sin(TIME)*/, vec2(64.0, 64.0));
  // vec3 ncolor = texture(TEXTURE, UV /* 256.0*/ /*+ 2.0*/* 32.0 + 0.25 *  sin(TIME) /** sin(TIME)*/).rgb;
  vec3 ncolor = vec3(noise);

  // gamma
  vec3 col = sqrt(v.yyy);
  // col = vec3(1.0) - col;
  col = mix(dyecolor, col, col.b);
  // col = mix(col, ncolor, 0.2);
  // col = abs(col);

  // col *= 1.0 - 0.8*v.x*step(p.y,0.33);
  // col *= mix(v.x,1.0,step(p.y,0.66));
  
    
  // col *= smoothstep( 0.003, 0.005, abs(p.y-0.33) );
  // col *= smoothstep( 0.003, 0.005, abs(p.y-0.66) );
  // col *= smoothstep( 0.003, 0.005, abs(p.x-c) );

  COLOR = vec4(col, 1.0);
}"
