[gd_scene load_steps=14 format=2]

[ext_resource path="res://script/rich_text_siny.gd" type="Script" id=1]
[ext_resource path="res://fonts/message_font.tres" type="DynamicFont" id=2]
[ext_resource path="res://fonts/header_font.tres" type="DynamicFont" id=3]
[ext_resource path="res://theme/menu_button.tres" type="Theme" id=4]
[ext_resource path="res://script/title_screen.gd" type="Script" id=5]
[ext_resource path="res://sound/focus_in.wav" type="AudioStream" id=6]
[ext_resource path="res://music/Danger - no guitar.wav" type="AudioStream" id=7]
[ext_resource path="res://sound/press_button.wav" type="AudioStream" id=8]
[ext_resource path="res://script/loop_audio.gd" type="Script" id=9]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec3 color = vec3(1.0, 0.0, 0.0);
uniform int layer = 1;
uniform vec2 offset;

// psrdnoise (c) Stefan Gustavson and Ian McEwan,
// ver. 2021-12-02, published under the MIT license:
// https://github.com/stegu/psrdnoise/
float psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient) {
	vec2 uv = vec2(x.x+x.y*0.5, x.y);
	vec2 i0 = floor(uv), f0 = fract(uv);
	float cmp = step(f0.y, f0.x);
	vec2 o1 = vec2(cmp, 1.0-cmp);
	vec2 i1 = i0 + o1, i2 = i0 + 1.0;
	vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);
	vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);
	vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);
	vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;
	vec3 iu, iv, xw, yw;
	if(any(greaterThan(period, vec2(0.0)))) {
		xw = vec3(v0.x, v1.x, v2.x);
		yw = vec3(v0.y, v1.y, v2.y);
		if(period.x > 0.0)
			xw = mod(vec3(v0.x, v1.x, v2.x), period.x);
		if(period.y > 0.0)
			yw = mod(vec3(v0.y, v1.y, v2.y), period.y);
		iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);
	} else {
		iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);
	}
	vec3 hash = mod(iu, 289.0);
	hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);
	hash = mod((hash*34.0 + 10.0)*hash, 289.0);
	vec3 psi = hash*0.07482 + alpha;
	vec3 gx = cos(psi); vec3 gy = sin(psi);
	vec2 g0 = vec2(gx.x, gy.x);
	vec2 g1 = vec2(gx.y, gy.y);
	vec2 g2 = vec2(gx.z, gy.z);
	vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
	w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;
	vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));
	float n = dot(w4, gdotx);
	vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;
	vec2 dn0 = w4.x*g0 + dw.x*x0;
	vec2 dn1 = w4.y*g1 + dw.y*x1;
	vec2 dn2 = w4.z*g2 + dw.z*x2;
	gradient = 10.9*(dn0 + dn1 + dn2);
	return 10.9*n;
}

float aastep(float threshold, float value) {
  float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));
//  float afwidth = fwidth(value);  // fwidth(v) is |dFdx(v)| + |dFdy(v)|
  return smoothstep(threshold-afwidth, threshold+afwidth, value);
}

void fragment() {
	/*
	COLOR = texture(TEXTURE, UV);
	float l_off = float(layer) * 0.1;
	COLOR.x = max(COLOR.x, 0.1) + l_off;
	COLOR.y = max(COLOR.y, 0.1) + l_off;
	COLOR.z = max(COLOR.z, 0.1) + l_off;
	COLOR.x *= color.x;
	COLOR.y *= color.y;
	COLOR.z *= color.z;
	*/
	const float scale = 12.0;
	vec2 v = scale * UV.xy;
	const vec2 p = vec2(0.0);
	float alpha = 0.0;
	vec2 g;
	vec2 newv = v + offset * 0.01;
	float n = psrdnoise(newv, p, TIME*0.5, g);
	float l_off = float(layer) * 0.05 + 0.025;
	// float n = 0.5 + 0.5 * psrdnoise(v + offset * 0.01, p, TIME*2.5, g);
	vec3 ncolor = vec3(g, 0.0);
	vec3 texcol = texture(TEXTURE, newv).xyz;
	texcol -= l_off;
	// color = texcol;
	vec3 xcolor = vec3(texcol + l_off * 2.0);
	vec3 ycolor = vec3(texcol - l_off * 2.0);
	vec3 mixcol = mix(texcol, xcolor, aastep(0.6, g.x));
	mixcol = mix(mixcol, ycolor, aastep(0.6, g.y));
	// vec3 ncolor = vec3(n);
	// ncolor = max(ncolor, vec3(0.1)) * color + l_off;
	COLOR = vec4(mix(mixcol, color, 0.5), 1.0);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 5 )
shader_param/color = Vector3( 1, 0, 0 )
shader_param/layer = 1
shader_param/offset = null

[sub_resource type="NoiseTexture" id=6]
width = 1024
height = 600
seamless = true

[sub_resource type="RichTextEffect" id=2]
script = ExtResource( 1 )

[node name="TitleScreen" type="MarginContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 5 )

[node name="PressButton" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
volume_db = -20.0
bus = "UI"

[node name="FocusIn" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -20.0
bus = "UI"

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )
volume_db = -30.0
bus = "Music"
script = ExtResource( 9 )

[node name="Panel" type="TextureRect" parent="."]
material = SubResource( 3 )
margin_right = 1024.0
margin_bottom = 600.0
texture = SubResource( 6 )

[node name="VBoxContainer" type="VBoxContainer" parent="."]
margin_top = 203.0
margin_right = 1024.0
margin_bottom = 396.0
grow_horizontal = 2
size_flags_horizontal = 5
size_flags_vertical = 4
alignment = 1

[node name="Header" type="RichTextLabel" parent="VBoxContainer"]
margin_right = 1024.0
margin_bottom = 45.0
size_flags_horizontal = 5
size_flags_vertical = 4
custom_fonts/normal_font = ExtResource( 3 )
bbcode_enabled = true
bbcode_text = "[center]frenzy[/center]"
text = "frenzy"
fit_content_height = true
custom_effects = [ SubResource( 2 ) ]

[node name="HSeparator" type="HSeparator" parent="VBoxContainer"]
margin_left = 412.0
margin_top = 49.0
margin_right = 612.0
margin_bottom = 53.0
rect_min_size = Vector2( 200, 0 )
size_flags_horizontal = 4

[node name="StartGame" type="Button" parent="VBoxContainer"]
margin_left = 437.0
margin_top = 57.0
margin_right = 587.0
margin_bottom = 81.0
rect_min_size = Vector2( 150, 0 )
size_flags_horizontal = 4
theme = ExtResource( 4 )
custom_colors/font_color_disabled = Color( 0.870588, 0.870588, 0.870588, 1 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = ExtResource( 2 )
text = "start game"

[node name="LevelSelect" type="Button" parent="VBoxContainer"]
margin_left = 437.0
margin_top = 85.0
margin_right = 587.0
margin_bottom = 109.0
rect_min_size = Vector2( 150, 0 )
focus_mode = 0
size_flags_horizontal = 4
theme = ExtResource( 4 )
custom_fonts/font = ExtResource( 2 )
enabled_focus_mode = 0
text = "level select"

[node name="Settings" type="Button" parent="VBoxContainer"]
margin_left = 437.0
margin_top = 113.0
margin_right = 587.0
margin_bottom = 137.0
rect_min_size = Vector2( 150, 0 )
size_flags_horizontal = 4
theme = ExtResource( 4 )
text = "settings"

[node name="Credits" type="Button" parent="VBoxContainer"]
margin_left = 437.0
margin_top = 141.0
margin_right = 587.0
margin_bottom = 165.0
rect_min_size = Vector2( 150, 0 )
focus_mode = 0
size_flags_horizontal = 4
theme = ExtResource( 4 )
custom_fonts/font = ExtResource( 2 )
enabled_focus_mode = 0
text = "credits"

[node name="QuitToDesktop" type="Button" parent="VBoxContainer"]
margin_left = 437.0
margin_top = 169.0
margin_right = 587.0
margin_bottom = 193.0
grow_horizontal = 2
rect_min_size = Vector2( 150, 0 )
focus_mode = 0
size_flags_horizontal = 4
theme = ExtResource( 4 )
custom_fonts/font = ExtResource( 2 )
enabled_focus_mode = 0
text = "quit to desktop"

[connection signal="mouse_entered" from="VBoxContainer/StartGame" to="." method="_on_Button_mouse_entered"]
[connection signal="pressed" from="VBoxContainer/StartGame" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="VBoxContainer/StartGame" to="." method="_on_StartGame_pressed"]
[connection signal="mouse_entered" from="VBoxContainer/LevelSelect" to="." method="_on_Button_mouse_entered"]
[connection signal="pressed" from="VBoxContainer/LevelSelect" to="." method="_on_LevelSelect_pressed"]
[connection signal="pressed" from="VBoxContainer/LevelSelect" to="." method="_on_Button_pressed"]
[connection signal="mouse_entered" from="VBoxContainer/Settings" to="." method="_on_Button_mouse_entered"]
[connection signal="pressed" from="VBoxContainer/Settings" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="VBoxContainer/Settings" to="." method="_on_Settings_pressed"]
[connection signal="mouse_entered" from="VBoxContainer/Credits" to="." method="_on_Button_mouse_entered"]
[connection signal="pressed" from="VBoxContainer/Credits" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="VBoxContainer/Credits" to="." method="_on_Credits_pressed"]
[connection signal="mouse_entered" from="VBoxContainer/QuitToDesktop" to="." method="_on_Button_mouse_entered"]
[connection signal="pressed" from="VBoxContainer/QuitToDesktop" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="VBoxContainer/QuitToDesktop" to="." method="_on_QuitToDesktop_pressed"]
